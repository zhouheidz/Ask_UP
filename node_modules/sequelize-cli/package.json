{
  "_args": [
    [
      {
        "raw": "sequelize-cli",
        "scope": null,
        "escapedName": "sequelize-cli",
        "name": "sequelize-cli",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Munic\\Desktop\\Ask_UP"
    ]
  ],
  "_from": "sequelize-cli@latest",
  "_id": "sequelize-cli@2.7.0",
  "_inCache": true,
  "_location": "/sequelize-cli",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sequelize-cli-2.7.0.tgz_1490426853123_0.6024130205623806"
  },
  "_npmUser": {
    "name": "sushantdhiman",
    "email": "sushantdhiman@outlook.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.2",
    "os-locale": "1.4.0",
    "read-pkg-up": "1.0.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "which-module": "1.0.0",
    "y18n": "3.2.1",
    "yargs-parser": "5.0.0"
  },
  "_requested": {
    "raw": "sequelize-cli",
    "scope": null,
    "escapedName": "sequelize-cli",
    "name": "sequelize-cli",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sequelize-cli/-/sequelize-cli-2.7.0.tgz",
  "_shasum": "122c26bf46609001fbc158404529f795f3950ea2",
  "_shrinkwrap": null,
  "_spec": "sequelize-cli",
  "_where": "C:\\Users\\Munic\\Desktop\\Ask_UP",
  "author": {
    "name": "Sascha Depold"
  },
  "bin": {
    "sequelize": "bin/sequelize"
  },
  "bugs": {
    "url": "https://github.com/sequelize/cli/issues"
  },
  "dependencies": {
    "bluebird": "^3.5.0",
    "cli-color": "~1.2.0",
    "findup-sync": "^0.4.0",
    "fs-extra": "^2.0.0",
    "gulp": "^3.9.1",
    "gulp-help": "~1.6.1",
    "js-beautify": "^1.6.11",
    "lodash": "^4.17.4",
    "moment": "^2.17.1",
    "resolve": "^1.3.2",
    "umzug": "^1.11.0",
    "yargs": "^7.0.1"
  },
  "description": "The Sequelize CLI",
  "devDependencies": {
    "coffee-script": "^1.12.4",
    "expect.js": "~0.3.1",
    "gulp-jscs": "^4.0.0",
    "gulp-jshint": "^2.0.4",
    "gulp-jshint-instafail": "^1.0.0",
    "gulp-mocha": "^4.1.0",
    "js2coffee": "^2.2.0",
    "jshint": "^2.9.4",
    "jshint-stylish": "^2.2.0",
    "mocha": "^3.2.0",
    "mysql": "^2.13.0",
    "nodeify": "^1.0.1",
    "pg": "^6.1.3",
    "pg-hstore": "^2.3.2",
    "run-sequence": "^1.2.2",
    "sequelize": "^3.30.2",
    "sqlite3": "^3.1.8",
    "through2": "^2.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "122c26bf46609001fbc158404529f795f3950ea2",
    "tarball": "https://registry.npmjs.org/sequelize-cli/-/sequelize-cli-2.7.0.tgz"
  },
  "gitHead": "c43da8c4204b75f58c9114436568cb426c403d05",
  "homepage": "https://github.com/sequelize/cli",
  "keywords": [
    "sequelize",
    "cli"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "americas",
      "email": "prplopes@gmail.com"
    },
    {
      "name": "sdepold",
      "email": "sascha@depold.com"
    },
    {
      "name": "sushantdhiman",
      "email": "sushantdhiman@outlook.com"
    }
  ],
  "name": "sequelize-cli",
  "optionalDependencies": {},
  "readme": "# sequelize/cli [![Build Status](https://travis-ci.org/sequelize/cli.svg?branch=master)](https://travis-ci.org/sequelize/cli) [![Code Climate](https://codeclimate.com/github/sequelize/cli.png)](https://codeclimate.com/github/sequelize/cli)\n\nThe Sequelize Command Line Interface (CLI)\n\n## Installation\n\nInstall this globally and you'll have access to the `sequelize` command anywhere on your system.\n\n```\nnpm install -g sequelize-cli\n```\n\nor install it locally to your `node_modules` folder\n\n```bash\nnpm install --save sequelize-cli\n```\n## Global Install Usage\n\n```\n$ sequelize [--HARMONY-FLAGS]\n```\n\n\n```\nSequelize [Node: 2.5.0, CLI: 1.8.3, ORM: 2.1.3]\n\nUsage\n  sequelize [task]\n\nAvailable tasks\n  db:migrate             Run pending migrations.\n  db:migrate:old_schema  Update legacy migration table\n  db:migrate:undo        Revert the last migration run.\n  db:migrate:undo:all    Revert all migrations ran.\n  db:seed                Run seeders.\n  db:seed:undo           Deletes data from the database.\n  db:seed:undo:all       Deletes data from the database.\n  help                   Display this help text. Aliases: h\n  init                   Initializes the project.\n  init:config            Initializes the configuration.\n  init:migrations        Initializes the migrations.\n  init:models            Initializes the models.\n  init:seeders           Initializes the seeders.\n  migration:create       Generates a new migration file. Aliases: migration:generate\n  model:create           Generates a model and its migration. Aliases: model:generate\n  seed:create            Generates a new seed file. Aliases: seed:generate\n  version                Prints the version number. Aliases: v\n\nAvailable manuals\n  help:db:migrate             The documentation for \"sequelize db:migrate\".\n  help:db:migrate:old_schema  The documentation for \"sequelize db:migrate:old_schema\".\n  help:db:migrate:undo        The documentation for \"sequelize db:migrate:undo\".\n  help:db:migrate:undo:all    The documentation for \"sequelize db:migrate:undo:all\".\n  help:db:seed                The documentation for \"sequelize db:seed\".\n  help:db:seed:undo           The documentation for \"sequelize db:seed:undo\".\n  help:db:seed:undo:all       The documentation for \"sequelize db:seed:undo:all\".\n  help:init                   The documentation for \"sequelize init\".\n  help:init:config            The documentation for \"sequelize init:config\".\n  help:init:migrations        The documentation for \"sequelize init:migrations\".\n  help:init:models            The documentation for \"sequelize init:models\".\n  help:init:seeders           The documentation for \"sequelize init:seeders\".\n  help:migration:create       The documentation for \"sequelize migration:create\".\n  help:model:create           The documentation for \"sequelize model:create\".\n  help:seed:create            The documentation for \"sequelize seed:create\".\n  help:version                The documentation for \"sequelize version\".\n```\n\n## Local Install Usage\n\n```\n$ node_modules/.bin/sequelize [--HARMONY-FLAGS]\n```\n\n## Options\n\nThe manuals will show all the flags and options which are available for the respective tasks.\nIf you find yourself in a situation where you always define certain flags in order to\nmake the CLI compliant to your project, you can move those definitions also into a file called\n`.sequelizerc`. The file will get `require`d if available and can therefore be either a JSON file\nor a Node.JS script that exports a hash.\n\n### Example for a Node.JS script\n\n```javascript\nvar path = require('path')\n\nmodule.exports = {\n  'config':          path.resolve('config', 'database.json'),\n  'migrations-path': path.resolve('db', 'migrate')\n}\n```\n\nThis will configure the CLI to always treat `config/database.json` as config file and\n`db/migrate` as the directory for migrations.\n\n### CoffeeScript support\n\nThe CLI is compatible with CoffeeScript. You can tell the CLI to enable that support via the `--coffee`\nflag. Please note that you'll need to install `js2coffee` and `coffee-script` for full support.\n\n### Configuration file\n\nBy default the CLI will try to use the file `config/config.js` and `config/config.json`. You can modify that path either via the `--config` flag or via the option mentioned earlier. Here is how a configuration file might look like (this is the one that `sequelize init` generates):\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_test\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_production\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\nThe properties can also be combined to a `url`:\n\n```json\n{\n  \"development\":  {\n    \"url\": \"mysql://root:password@mysql_host.com/database_name\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\nIn case of a JS file it obviously needs to `module.exports` the object.\nOptionally, it's possible to put all the configuration to the `url` option. The format is explained in the section below.\n\n### Configuration Connection String\n\nAs an alternative to the `--config` option with configuration files defining your database, you can\nuse the `--url` option to pass in a connection string. For example:\n\n`sequelize db:migrate --url 'mysql://root:password@mysql_host.com/database_name'`\n\n### Configuration Connection Environment Variable\n\nAnother possibility is to store the URL in an environment variable and to tell\nthe CLI to lookup a certain variable during runtime. Let's assume you have an\nenvironment variable called `DB_CONNECTION_STRING` which stores the value\n`mysql://root:password@mysql_host.com/database_name`. In order to make the CLI\nuse it, you have to use declare it in your config file:\n\n```\n{\n    \"production\": {\n        \"use_env_variable\": \"DB_CONNECTION_STRING\"\n    }\n}\n```\n\nWith v2.0.0 of the CLI you can also just directly access the environment variables inside the `config/config.js`:\n\n```\nmodule.exports = {\n    \"production\": {\n        \"hostname\": process.env.DB_HOSTNAME\n    }\n}\n```\n\n### Storage\n\nThere are three types of storage that you can use: `sequelize`, `json`, and `none`.\n\n- `sequelize` : stores migrations and seeds in a table on the sequelize database\n- `json` : stores migrations and seeds on a json file\n- `none` : does not store any migration/seed\n\n\n#### Migration\n\nBy default the CLI will create a table in your database called `SequelizeMeta` containing an entry\nfor each executed migration. To change this behavior, there are three options you can add to the\nconfiguration file. Using `migrationStorage`, you can choose the type of storage to be used for\nmigrations. If you choose `json`, you can specify the path of the file using `migrationStoragePath`\nor the CLI will write to the file `sequelize-meta.json`. If you want to keep the information in the\ndatabase, using `sequelize`, but want to use a different table, you can change the table name using\n`migrationStorageTableName`.\n\n```js\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n\n    // Use a different storage type. Default: sequelize\n    \"migrationStorage\": \"json\",\n\n    // Use a different file name. Default: sequelize-meta.json\n    \"migrationStoragePath\": \"sequelizeMeta.json\"\n\n    // Use a different table name. Default: SequelizeMeta\n    \"migrationStorageTableName\": \"sequelize_meta\"\n  }\n}\n```\n\nNOTE: The `none` storage is not recommended as a migration storage. If you decide to use it, be\naware of the implications of having no record of what migrations did or didn't run.\n\n\n#### Seed\n\nBy default the CLI will not save any seed that is executed. If you choose to change this behavior (!),\nyou can use `seederStorage` in the configuration file to change the storage type. If you choose `json`,\nyou can specify the path of the file using `seederStoragePath` or the CLI will write to the file\n`sequelize-data.json`. If you want to keep the information in the database, using `sequelize`, you can\nspecify the table name using `seederStorageTableName`, or it will default to `SequelizeData`.\n\n```js\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n    // Use a different storage. Default: none\n    \"seederStorage\": \"json\",\n    // Use a different file name. Default: sequelize-data.json\n    \"seederStoragePath\": \"sequelizeData.json\"\n    // Use a different table name. Default: SequelizeData\n    \"seederStorageTableName\": \"sequelize_data\"\n  }\n}\n```\n\n\n### Dialect specific options\n\nIn order to pass options to the underlying database connectors, you can add the property `dialectOptions`\nto your configuration like this:\n\n```\nvar fs = require('fs');\n\nmodule.exports = {\n  development: {\n    dialect: 'mysql',\n    dialectOptions: {\n      ssl: {\n        ca: fs.readFileSync(__dirname + '/mysql-ca.crt')\n      }\n    }\n  }\n};\n```\n\n### Schema migration\n\nSince v1.0.0 the CLI supports a new schema for saving the executed migrations. It will tell you about that\nwhen you run a migration while having the old schema. You can opt-in for auto migrating the schema by adding a special property to your config file:\n\n```json\n{\n  \"development\": {\n    \"autoMigrateOldSchema\": true\n  }\n}\n```\n\n### The migration schema\n\nThe CLI uses [umzug](https://github.com/sequelize/umzug) and its migration schema. This means a migration has to look like this:\n\n```javascript\n\"use strict\";\n\nmodule.exports = {\n  up: function(queryInterface, Sequelize, done) {\n    done();\n  },\n\n  down: function(queryInterface) {\n    return new Promise(function (resolve, reject) {\n      resolve();\n    });\n  }\n};\n```\n\nPlease note that you can either return a Promise or call the third argument of the function once your asynchronous logic was executed. If you pass something to the callback function (the `done` function) it will be treated as erroneous execution.\n\nAdditional note: If you need to access the sequelize instance, you can easily do that via `queryInterface.sequelize`. For example `queryInterface.sequelize.query('CREATE TABLE mytable();')`.\n\n## Help\n\nRead the manuals via `sequelize help:<task-name>` for further information.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/sequelize/cli.git"
  },
  "scripts": {
    "test": "gulp"
  },
  "version": "2.7.0"
}
